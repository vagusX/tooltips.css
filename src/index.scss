$default-color: fade-out(#000, 0.1);
$gap: 5px;
$z-index: 1070;

/* --- direction list for indexOf function --- */
$vertical-list: top, bottom;
$horizonal-list: left, right;

@function indexOf($list, $value) {
  $index: null;

  @for $i from 1 through length($list) {
    @if nth($list, $i) == $value {
      $index: $i;
    }
  }

  @return $index;
}

@function decideAxis($position) {
  $indexOfVertical: indexOf($vertical-list, $position);
  $indexOfHorizonal: indexOf($horizonal-list, $position);
  $axisDirection: null;

  @if ($indexOfVertical) {
    $axisDirection: vertical;
  }
  @if ($indexOfHorizonal) {
    $axisDirection: horizonal;
  }

  @return $axisDirection;
}

@function getAnotherOne($list, $position) {
  $index: indexOf($list, $position);

  $propsIndex: 1;
  @if ($index) {
    $propsIndex: 3 - $index;// get index of opposite direction
  }
  $oppositeDirection: #{nth($list, $propsIndex)};
  @return $oppositeDirection;
}

@function decideDirection($value) {
  $axisDirection: decideAxis($value);
  $direction: null;

  @if ($axisDirection == vertical) {
    $direction: getAnotherOne($vertical-list, $value);
  }
  @if ($axisDirection == horizonal) {
    $direction: getAnotherOne($horizonal-list, $value);
  }

  @return $direction;
}

@mixin get-position-props($position: top) {
  $axisDirection: decideAxis($position);
  position: absolute;

  @if ($axisDirection == vertical) {
    $direction: getAnotherOne($vertical-list, $position);
    #{$direction}: 100%;
    left: 50%;
    transform: translateX(-50%);
  }
  @if ($axisDirection == horizonal) {
    $direction: getAnotherOne($horizonal-list, $position);
    #{$direction}: 100%;
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin get-margin-props($position: top) {
  $direction: decideDirection($position);

  &::before {
    margin-#{$direction}: $gap;
  }
  &::after {
    margin-#{$direction}: $gap * 2;
  }
}

@mixin arrow($position: top) {
  border-#{$position}: $gap solid $default-color;

  $axisDirection: decideAxis($position);
  @if ($axisDirection == vertical) {
    border-left: $gap solid transparent;
    border-right: $gap solid transparent;
  }
  @if ($axisDirection == horizonal) {
    border-top: $gap solid transparent;
    border-bottom: $gap solid transparent;
  }
}

@each $direction in top, bottom, left, right {
  [data-tooltip-direction="#{$direction}"] {
    position: relative;
    cursor: pointer;
    @include get-margin-props($direction);

    &::before,
    &::after {
      /* --- base styles --- */
      display: inline-block;
      opacity: 0;
      transition: opacity .2s ease-in-out;
      z-index: $z-index;
      /* --- position --- */
      @include get-position-props($direction);
    }

    &::after {
      content: attr(data-tooltip-content);
      padding: $gap $gap * 2;
      font-size: 12px;
      color: #fff;
      background-color: $default-color;
      border-radius: 3px;
      padding: .5em 1em;
      white-space: nowrap;
    }

    &::before {
      content: '';
      @include arrow($direction);
    }

    &:hover {
      &::before,
      &::after {
        opacity: 1;
      }
    }

    &[data-tip-edge]::after {
      border-radius: 0px;
    }
  }
}
